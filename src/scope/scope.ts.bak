export type Scope<T extends object> = T & {
    $fn?: {
        [key: string]: Function;
    };
    $on?: {
        init?: Function;
        mounted?: Function;
        updated?: Function;
        destroyed?: Function;
    };
    $refs?: {
        [key: string]: HTMLElement;
    };
    $elements?: {
        /**
         * Each time an element with ka:ref="'key'" is rendered, call this function. (also for updates)
         */
        [key: string]: (element?: HTMLElement, scope?: T, ref?: string) => void;
    };
    $watch?: {
        /**
         * One or more paths to watch for user changes. Use * to watch all properties. Select
         * path by using dot notation. For example, 'user.name' will watch for changes in
         * the name property of the user object. Or 'user.*' will watch for changes in all
         * properties of the user object.
         *
         * @param key
         */
        [key: string]: (event: string, value: any, oldValue: any, element: HTMLElement, e: Event) => void;
    };
};

export function tj_scope<T extends Record<string, any>>(init: Scope<T>): Scope<T> {
    const state = { ...init };

    return new Proxy(state, {
        get(target, key: string) {
            if (key in target) {
                return target[key];
            }
            if (target.$fn && Object.prototype.hasOwnProperty.call(target.$fn, key)) {
                return target.$fn[key];
            }
            if (target.$refs && Object.prototype.hasOwnProperty.call(target.$refs, key)) {
                return target.$refs[key];
            }
            if (target.$watch && Object.prototype.hasOwnProperty.call(target.$watch, key)) {
                return target.$watch[key];
            }
            return undefined;
        },
        set(target, key: string, value) {
            if (key in target) {
                target[key] = value;
                return true;
            }
            if (target.$refs && Object.prototype.hasOwnProperty.call(target.$refs, key)) {
                target.$refs[key] = value;
                return true;
            }
            return false;
        }
    });
}

// Example usage
let scope = tj_scope({
    form: null as string | null,

    $fn: {},

    $watch: {
        'change|keydown@form|form.*': (event, value: string | null, oldValue, element, e) => {
            console.log('form changed', value);
        }
    }
});
