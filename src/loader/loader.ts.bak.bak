/**
 * Application Loader
 *
 * Runlevel Based Application Loader for Micro-Frontend Components.
 *
 * ## Usage
 *
 * Inside a bundle:
 *
 * ```javascript
 * await runlevel(5);
 * ```
 *
 * From outside: (will be executed as soon as the loader is ready)
 *
 * ```javascript
 * window.onloaderready = async () => {
 *     await window.loader.runlevel(5);
 * }
 * ```
 *
 * Or event-driven:
 *
 * ```javascript
 * window.addEventListener("loaderready", async () => {
 *     await window.loader.runlevel(5);
 * });
 * ```
 *
 * ## The Runlevels
 *
 * Runlevels are executed sequentially from 0 to 10 in ascending order.
 * The callbacks registered for each runlevel execute in parallel, and the next runlevel only starts after all callbacks at the current level have completed.
 *
 * - The loader observes execution times and warns if a callback takes longer than 200ms.
 * - If multiple bundles use different loader versions, a warning is issued, and the highest version wins.
 * - When overriding an older loader version, ensure that previously registered callbacks remain functional.
 */

export type LoaderCallback = () => Promise<any> | any;

export class Loader {
    private callbacks: Map<number, LoaderCallback[]> = new Map();
    public version: number;
    private maxRunLevel = 10;

    constructor(version: number = 1) {
        this.version = version;

        // Handle global loader versioning conflict
        if (typeof window !== 'undefined') {
            if ((window as any).loader) {
                if ((window as any).loader.version < this.version) {
                    console.warn("A lower version of Loader detected. Overriding with higher version.");
                    (window as any).loader = this;
                }
            } else {
                (window as any).loader = this;
                document.dispatchEvent(new Event("loaderready"));

                if (typeof (window as any).onloaderready === "function") {
                    (window as any).onloaderready();
                }
            }
        }
    }

    /**
     * Registers a callback for a specific runlevel.
     * @param runlevel - The runlevel (number between 0 and 10)
     * @param callback - The callback function to be executed at this runlevel.
     *
     * Example:
     * ```javascript
     * loader.registerCallback(3, async () => {
     *     console.log("Executing runlevel 3 callback.");
     * });
     * ```
     */
    public registerCallback(runlevel: number, callback: LoaderCallback): void {
        if (runlevel < 0 || runlevel > this.maxRunLevel) {
            console.warn(`Runlevel ${runlevel} is out of range (0-${this.maxRunLevel})`);
            return;
        }

        const existingCallbacks = this.callbacks.get(runlevel) || [];
        existingCallbacks.push(callback);
        this.callbacks.set(runlevel, existingCallbacks);
    }

    /**
     * Executes all registered callbacks for a specific runlevel.
     * - Callbacks at the given runlevel are executed concurrently.
     * - Execution durations are recorded, and a warning is issued if a callback exceeds 200ms.
     *
     * @param runlevel - The runlevel to execute.
     *
     * Example:
     * ```javascript
     * await loader.runlevel(5);
     * ```
     */
    public async runlevel(runlevel: number = 5): Promise<void> {
        if (runlevel < 0 || runlevel > this.maxRunLevel) {
            console.warn(`Runlevel ${runlevel} is out of range (0-${this.maxRunLevel})`);
            return;
        }

        const tasks = this.callbacks.get(runlevel) || [];
        const promises = tasks.map(async (callback) => {
            const start = performance.now();
            try {
                await callback();
            } catch (error) {
                console.error(`Error in callback at runlevel ${runlevel}:`, error);
            }
            const duration = performance.now() - start;
            if (duration > 200) {
                console.warn(`Callback in runlevel ${runlevel} took ${duration.toFixed(2)}ms`);
            }
        });

        await Promise.all(promises);
    }
}

/**
 * Triggers execution of a specific runlevel.
 * Ensures the loader is initialized before calling `runlevel()`.
 *
 * @param runlevel - The runlevel to execute.
 * @returns A Promise that resolves when all callbacks for the runlevel have completed.
 *
 * Example:
 * ```javascript
 * await runlevel(2);
 * ```
 */
export function runlevel(runlevel: number = 5): Promise<void> {
    if (typeof window === 'undefined') {
        throw new Error("runlevel() should only be called in a browser environment.");
    }
    if (!(window as any).loader) {
        new Loader();
    }
    return (window as any).loader.runlevel(runlevel);
}

declare global {
    interface Window {
        loader: Loader;
        onloaderready: () => void;
    }
}
