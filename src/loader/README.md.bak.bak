# Application Loader

Runlevel Based Application Loader for Micro-Frontend Components.

## Usage

Inside a bundle:

```javascript
await runlevel(5);
```

From outside (will be executed as soon as the loader is ready):

```javascript
window.onloaderready = async () => {
    await window.loader.runlevel(5);
};
```

Or event-driven approach:

```javascript
window.addEventListener("loaderready", async () => {
    await window.loader.runlevel(5);
});
```

## The Runlevels

The runlevels are executed sequentially from 0 to 10 in ascending order. The callbacks for each runlevel are executed in parallel, and the system waits for all to complete before proceeding to the next runlevel.

The loader will monitor the startup sequence and record the time each callback takes to complete. If a callback exceeds 200ms, a warning is issued.

If multiple bundles use different versions of the loader, a warning is issued, and the highest version is used. To maintain compatibility, ensure that older loader callbacks are not overwritten.

## Concept of Runlevels in a Multi-Bundle Micro-Frontend Environment

Runlevels provide a structured way to initialize and load different parts of a micro-frontend application in a coordinated manner. In a multi-bundle environment, different bundles may register their own initialization routines, and the runlevel system ensures that these routines execute in a well-defined sequence without blocking each other unnecessarily.

Each runlevel represents a stage in the application's startup process, where:
- Runlevel 0 might initialize global configuration settings.
- Runlevel 1-3 could load essential services or authentication mechanisms.
- Runlevel 4-7 may initialize domain-specific or business logic components.
- Runlevel 8-10 could load UI components, widgets, or finalize rendering.

By executing callbacks in parallel within a runlevel while ensuring sequential progression between runlevels, the loader provides controlled initialization of application components with minimal delays.

Additionally, the loader manages version conflicts automatically, preferring the highest available version. This prevents older loaders from overriding newer versions while ensuring the overall system remains stable.

The use of performance monitoring also ensures that slow initializations can be identified early, helping developers optimize the startup process and avoid unexpected bottlenecks.