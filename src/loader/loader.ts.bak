/**  
 * Application Loader  
 *  
 * Runlevel Based Application Loader for Micro-Frontend Components.  
 *  
 * ## Usage  
 *  
 * Inside a bundle:  
 *  
 * ```javascript  
 * await runlevel(5);  
 * ```  
 *  
 * From outside: (will be executed as soon as the loader is ready)  
 *  
 * ```javascript  
 * window.onloaderready = async () => {  
 *     await window.loader.runlevel(5);  
 * }  
 * ```  
 *  
 * Or event-driven:  
 *  
 * ```javascript  
 * window.addEventListener("loaderready", async () => {  
 *     await window.loader.runlevel(5);  
 * });  
 * ```  
 *  
 * ## The Runlevels  
 *  
 * Runlevels are executed sequentially from 0 to 10 in ascending order.  
 * The callbacks registered for each runlevel execute in parallel, and the next runlevel only starts after all callbacks at the current level have completed.  
 *  
 * - The loader observes execution times and warns if a callback takes longer than 200ms.  
 * - If multiple bundles use different loader versions, a warning is issued, and the highest version wins.  
 * - When overriding an older loader version, ensure that previously registered callbacks remain functional.  
 */  

export type LoaderCallback = () => Promise<any> | any;  

export class Loader {  
    private callbacks: Map<number, LoaderCallback[]> = new Map();  
    private runlevelPromises: { [key: number]: { promise: Promise<void>, resolve: () => void } } = {};  
    public version: number;  
    private maxRunLevel = 10;  

    constructor(version: number = 1) {  
        this.version = version;  

        for (let i = 0; i <= this.maxRunLevel; i++) {  
            let resolver: () => void = () => {};  
            const promise = new Promise<void>((resolve) => { resolver = resolve; });  
            this.runlevelPromises[i] = { promise, resolve: resolver };  
        }  

        if (typeof window !== 'undefined' && !(window as any).loader) {  
            (window as any).loader = this;  
            document.dispatchEvent(new Event("loaderready"));  

            if (typeof (window as any).onloaderready === "function") {  
                (window as any).onloaderready();  
            }  
        }  

        this.run();  
    }  

    public registerCallback(runlevel: number, callback: LoaderCallback): void {  
        if (runlevel < 0 || runlevel > this.maxRunLevel) {  
            console.warn(`Runlevel ${runlevel} is out of range (0-${this.maxRunLevel})`);  
            return;  
        }  

        const existingCallbacks = this.callbacks.get(runlevel) || [];  
        existingCallbacks.push(callback);  
        this.callbacks.set(runlevel, existingCallbacks);  
    }  

    private async executeRunlevel(runlevel: number): Promise<void> {  
        if (runlevel < 0 || runlevel > this.maxRunLevel) {  
            console.warn(`Runlevel ${runlevel} is out of range (0-${this.maxRunLevel})`);  
            return;  
        }  

        const tasks = this.callbacks.get(runlevel) || [];  
        const promises = tasks.map(async (callback) => {  
            const start = performance.now();  
            try {  
                await callback();  
            } catch (error) {  
                console.error(`Error in callback at runlevel ${runlevel}:`, error);  
            }  
            const duration = performance.now() - start;  
            if (duration > 200) {  
                console.warn(`Callback in runlevel ${runlevel} took ${duration.toFixed(2)}ms`);  
            }  
        });  

        await Promise.all(promises);  
        this.runlevelPromises[runlevel].resolve();  
    }  

    public async run(): Promise<void> {  
        await this.executeRunlevel(0);  

        if (!document.body) {  
            await new Promise<void>(resolve => {  
                document.addEventListener("DOMContentLoaded", () => resolve());  
            });  
        }  
        for (let lvl = 1; lvl <= 4; lvl++) {  
            await this.executeRunlevel(lvl);  
        }  

        if (document.readyState === "loading") {  
            await new Promise<void>(resolve => {  
                document.addEventListener("DOMContentLoaded", () => resolve());  
            });  
        }  
        for (let lvl = 5; lvl <= 9; lvl++) {  
            await this.executeRunlevel(lvl);  
        }  

        if (document.readyState !== "complete") {  
            await new Promise<void>(resolve => {  
                window.addEventListener("load", () => resolve());  
            });  
        }  
        await this.executeRunlevel(10);  
    }  

    public runlevel(runlevel: number = 5): Promise<void> {  
        if (runlevel < 0 || runlevel > this.maxRunLevel) {  
            console.warn(`Runlevel ${runlevel} is out of range (0-${this.maxRunLevel})`);  
            return Promise.resolve();  
        }  
        return this.runlevelPromises[runlevel].promise;  
    }  
}  

export function runlevel(runlevel: number = 5): Promise<void> {  
    if (typeof window === 'undefined') {  
        throw new Error("runlevel() should only be called in a browser environment.");  
    }  
    if (!(window as any).loader) {  
        new Loader();  
    }  
    return (window as any).loader.runlevel(runlevel);  
}  

declare global {  
    interface Window {  
        loader: Loader;  
        onloaderready: () => void;  
    }  
}